/*
给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:
输入: s = "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。

示例 2:
输入: s = "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。

示例 3:
输入: s = "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
*/ 
var lengthOfLongestSubstring = function(s) {
    // 哈希集合，记录每个字符是否出现过
    const occ = new Set();
    const n = s.length;
    // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动
    let rk = -1, ans = 0;
    for (let i = 0; i < n; i++) {
        // 滑动窗口思想，rk右移，左指针也要右移，移除一个字符
        // i!=0 说明遇到重复字符了，所以要移除上一个字符
        if (i != 0) {
            occ.delete(s.charAt(i - 1));
        }
        /*
        如果先移动右指针，则无法确定左指针需要移动到哪个位置，才能正确地移除滑动窗口中的字符。
        因为如果先更新右指针，则滑动窗口的大小变大了，左指针可能需要移动到右指针的位置，也可能不需要移动。
        */ 
        // 只要右指针的下一个位置小于n且该位置的字符还没有出现过，就将该字符添加到occ中，并将右指针向右移动一位。
        while (rk + 1 < n && !occ.has(s.charAt(rk + 1))) {
            // 不断地移动右指针
            occ.add(s.charAt(rk + 1));
            ++rk;
        }
        // 第 i 到 rk 个字符是一个极长的无重复字符子串
        ans = Math.max(ans, rk - i + 1);
    }
    return ans;
};

